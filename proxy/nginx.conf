events {
    worker_connections 1024;
}

http {
    log_format   main '$remote_addr - $remote_user [$time_local]  $status '
        '"$request" $body_bytes_sent "$http_referer" '
        '"$http_user_agent" "$http_x_forwarded_for"';

    server {
        # alternative port for user or registered ports (here ‘HTTP’ service)
        listen 8080;

        location /ping {
            location /ping/ping/ {
                return  200 '{"status":200,"message":"Nested ping with / !"}\n';
            }
            location /ping/ping {
                return  200 '{"status":200,"message":"Nested ping!"}\n';
            }
            # Will raises error as 'doubleping' regex not match with 'ping' one
            # location /doubleping/ping/ {
            #     return  200 '{"status":200,"message":"Nested doubleping with / !"}\n';
            # }
            # location /doubleping/ping {
            #     return  200 '{"status":200,"message":"Nested doubleping!"}\n';
            # }
            location /ping/user {
                proxy_pass http://user:3000/ping;
            }
            location /ping/match {
                proxy_pass http://match:3100/ping;
            }
            return  200 '{"status":200,"message":"Hello visitor"}\n';
        }


        # Be aware both location and proxy_pass values should end with /
        # When you have a trailing / in the proxy_pass url then the url mentioned in the location block is removed from the actual url starting and rest of the pass is sent to the proxied server
        location /api {
            location /api/user/ {
                proxy_pass http://user:3000/;
            }
            location /api/match/ {
                proxy_pass http://match:3100/;
            }
        }

        # Error responses
        # Invalid paths are treated as bad requests
        error_page 404 = @400;
        # Do not send backend errors to the client
        proxy_intercept_errors on;
        # API client friendly JSON error responses
        include errors_json.conf;
        # If no content-type then assume JSON
        default_type application/json;
    }
}